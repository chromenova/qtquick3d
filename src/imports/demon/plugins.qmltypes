import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtDemon 1.0'

Module {
    dependencies: ["QtQuick 2.12"]
    Component {
        name: "QDemonCamera"
        defaultProperty: "data"
        prototype: "QDemonNode"
        exports: ["QtDemon/DemonCamera 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QDemonCameraScaleModes"
            values: {
                "Fit": 0,
                "SameSize": 1,
                "FitHorizontal": 2,
                "FitVertical": 3
            }
        }
        Enum {
            name: "QDemonCameraScaleAnchors"
            values: {
                "Center": 0,
                "North": 1,
                "NorthEast": 2,
                "East": 3,
                "SouthEast": 4,
                "South": 5,
                "SouthWest": 6,
                "West": 7,
                "NorthWest": 8
            }
        }
        Enum {
            name: "QDemonCameraProjectionMode"
            values: {
                "Perspective": 0,
                "Orthographic": 1
            }
        }
        Property { name: "clipNear"; type: "float" }
        Property { name: "clipFar"; type: "float" }
        Property { name: "fieldOfView"; type: "float" }
        Property { name: "isFieldOFViewHorizontal"; type: "bool" }
        Property { name: "projectionMode"; type: "QDemonCameraProjectionMode" }
        Property { name: "scaleMode"; type: "QDemonCameraScaleModes" }
        Property { name: "scaleAnchor"; type: "QDemonCameraScaleAnchors" }
        Property { name: "frustumScaleX"; type: "float" }
        Property { name: "frustumScaleY"; type: "float" }
        Signal {
            name: "clipNearChanged"
            Parameter { name: "clipNear"; type: "float" }
        }
        Signal {
            name: "clipFarChanged"
            Parameter { name: "clipFar"; type: "float" }
        }
        Signal {
            name: "fieldOfViewChanged"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Signal {
            name: "isFieldOFViewHorizontalChanged"
            Parameter { name: "isFieldOFViewHorizontal"; type: "bool" }
        }
        Signal {
            name: "scaleModeChanged"
            Parameter { name: "scaleMode"; type: "QDemonCameraScaleModes" }
        }
        Signal {
            name: "scaleAnchorChanged"
            Parameter { name: "scaleAnchor"; type: "QDemonCameraScaleAnchors" }
        }
        Signal {
            name: "frustumScaleXChanged"
            Parameter { name: "frustumScaleX"; type: "float" }
        }
        Signal {
            name: "frustumScaleYChanged"
            Parameter { name: "frustumScaleY"; type: "float" }
        }
        Signal {
            name: "projectionModeChanged"
            Parameter { name: "projectionMode"; type: "QDemonCameraProjectionMode" }
        }
        Method {
            name: "setClipNear"
            Parameter { name: "clipNear"; type: "float" }
        }
        Method {
            name: "setClipFar"
            Parameter { name: "clipFar"; type: "float" }
        }
        Method {
            name: "setFieldOfView"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Method {
            name: "setIsFieldOFViewHorizontal"
            Parameter { name: "isFieldOFViewHorizontal"; type: "bool" }
        }
        Method {
            name: "setScaleMode"
            Parameter { name: "scaleMode"; type: "QDemonCameraScaleModes" }
        }
        Method {
            name: "setScaleAnchor"
            Parameter { name: "scaleAnchor"; type: "QDemonCameraScaleAnchors" }
        }
        Method {
            name: "setFrustumScaleX"
            Parameter { name: "frustumScaleX"; type: "float" }
        }
        Method {
            name: "setFrustumScaleY"
            Parameter { name: "frustumScaleY"; type: "float" }
        }
        Method {
            name: "setProjectionMode"
            Parameter { name: "projectionMode"; type: "QDemonCameraProjectionMode" }
        }
    }
    Component {
        name: "QDemonCustomMaterial"
        defaultProperty: "data"
        prototype: "QDemonMaterial"
        exports: ["QtDemon/DemonCustomMaterial 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Property { name: "hasTransparency"; type: "bool" }
        Property { name: "hasRefraction"; type: "bool" }
        Property { name: "hasVolumetricDF"; type: "bool" }
        Signal {
            name: "hasTransparencyChanged"
            Parameter { name: "hasTransparency"; type: "bool" }
        }
        Signal {
            name: "hasRefractionChanged"
            Parameter { name: "hasRefraction"; type: "bool" }
        }
        Signal {
            name: "hasVolumetricDFChanged"
            Parameter { name: "hasVolumetricDF"; type: "bool" }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "setHasTransparency"
            Parameter { name: "hasTransparency"; type: "bool" }
        }
        Method {
            name: "setHasRefraction"
            Parameter { name: "hasRefraction"; type: "bool" }
        }
        Method {
            name: "setHasVolumetricDF"
            Parameter { name: "hasVolumetricDF"; type: "bool" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "string" }
        }
    }
    Component {
        name: "QDemonDefaultMaterial"
        defaultProperty: "data"
        prototype: "QDemonMaterial"
        exports: ["QtDemon/DemonDefaultMaterial 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QDemonDefaultMaterialLighting"
            values: {
                "NoLighting": 0,
                "VertexLighting": 1,
                "FragmentLighting": 2
            }
        }
        Enum {
            name: "QDemonDefaultMaterialBlendMode"
            values: {
                "Normal": 0,
                "Screen": 1,
                "Multiply": 2,
                "Overlay": 3,
                "ColorBurn": 4,
                "ColorDodge": 5
            }
        }
        Enum {
            name: "QDemonDefaultMaterialSpecularModel"
            values: {
                "Default": 0,
                "KGGX": 1,
                "KWard": 2
            }
        }
        Property { name: "lighting"; type: "QDemonDefaultMaterialLighting" }
        Property { name: "blendMode"; type: "QDemonDefaultMaterialBlendMode" }
        Property { name: "diffuseColor"; type: "QColor" }
        Property { name: "diffuseMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "diffuseMap2"; type: "QDemonImage"; isPointer: true }
        Property { name: "diffuseMap3"; type: "QDemonImage"; isPointer: true }
        Property { name: "emissivePower"; type: "float" }
        Property { name: "emissiveMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "emissiveColor"; type: "QColor" }
        Property { name: "specularReflectionMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "specularMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "specularModel"; type: "QDemonDefaultMaterialSpecularModel" }
        Property { name: "specularTint"; type: "QColor" }
        Property { name: "indexOfRefraction"; type: "float" }
        Property { name: "fresnelPower"; type: "float" }
        Property { name: "specularAmount"; type: "float" }
        Property { name: "specularRoughness"; type: "float" }
        Property { name: "roughnessMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "opacity"; type: "float" }
        Property { name: "opacityMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "bumpMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "bumpAmount"; type: "float" }
        Property { name: "normalMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "translucencyMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "translucentFalloff"; type: "float" }
        Property { name: "diffuseLightWrap"; type: "float" }
        Property { name: "vertexColors"; type: "bool" }
        Signal {
            name: "lightingChanged"
            Parameter { name: "lighting"; type: "QDemonDefaultMaterialLighting" }
        }
        Signal {
            name: "blendModeChanged"
            Parameter { name: "blendMode"; type: "QDemonDefaultMaterialBlendMode" }
        }
        Signal {
            name: "diffuseColorChanged"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Signal {
            name: "diffuseMapChanged"
            Parameter { name: "diffuseMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "diffuseMap2Changed"
            Parameter { name: "diffuseMap2"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "diffuseMap3Changed"
            Parameter { name: "diffuseMap3"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "emissivePowerChanged"
            Parameter { name: "emissivePower"; type: "float" }
        }
        Signal {
            name: "emissiveMapChanged"
            Parameter { name: "emissiveMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "emissiveColorChanged"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Signal {
            name: "specularReflectionMapChanged"
            Parameter { name: "specularReflectionMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "specularMapChanged"
            Parameter { name: "specularMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "specularModelChanged"
            Parameter { name: "specularModel"; type: "QDemonDefaultMaterialSpecularModel" }
        }
        Signal {
            name: "specularTintChanged"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Signal {
            name: "indexOfRefractionChanged"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Signal {
            name: "fresnelPowerChanged"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Signal {
            name: "specularAmountChanged"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Signal {
            name: "specularRoughnessChanged"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Signal {
            name: "roughnessMapChanged"
            Parameter { name: "roughnessMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityMapChanged"
            Parameter { name: "opacityMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "bumpMapChanged"
            Parameter { name: "bumpMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "bumpAmountChanged"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Signal {
            name: "normalMapChanged"
            Parameter { name: "normalMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "translucencyMapChanged"
            Parameter { name: "translucencyMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "translucentFalloffChanged"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Signal {
            name: "diffuseLightWrapChanged"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Signal {
            name: "vertexColorsChanged"
            Parameter { name: "vertexColors"; type: "bool" }
        }
        Method {
            name: "setLighting"
            Parameter { name: "lighting"; type: "QDemonDefaultMaterialLighting" }
        }
        Method {
            name: "setBlendMode"
            Parameter { name: "blendMode"; type: "QDemonDefaultMaterialBlendMode" }
        }
        Method {
            name: "setDiffuseColor"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Method {
            name: "setDiffuseMap"
            Parameter { name: "diffuseMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setDiffuseMap2"
            Parameter { name: "diffuseMap2"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setDiffuseMap3"
            Parameter { name: "diffuseMap3"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setEmissivePower"
            Parameter { name: "emissivePower"; type: "float" }
        }
        Method {
            name: "setEmissiveMap"
            Parameter { name: "emissiveMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setEmissiveColor"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Method {
            name: "setSpecularReflectionMap"
            Parameter { name: "specularReflectionMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setSpecularMap"
            Parameter { name: "specularMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setSpecularModel"
            Parameter { name: "specularModel"; type: "QDemonDefaultMaterialSpecularModel" }
        }
        Method {
            name: "setSpecularTint"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Method {
            name: "setIndexOfRefraction"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Method {
            name: "setFresnelPower"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Method {
            name: "setSpecularAmount"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Method {
            name: "setSpecularRoughness"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Method {
            name: "setRoughnessMap"
            Parameter { name: "roughnessMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setOpacityMap"
            Parameter { name: "opacityMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setBumpMap"
            Parameter { name: "bumpMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setBumpAmount"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Method {
            name: "setNormalMap"
            Parameter { name: "normalMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setTranslucencyMap"
            Parameter { name: "translucencyMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setTranslucentFalloff"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Method {
            name: "setDiffuseLightWrap"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Method {
            name: "setVertexColors"
            Parameter { name: "vertexColors"; type: "bool" }
        }
    }
    Component {
        name: "QDemonEffect"
        defaultProperty: "data"
        prototype: "QDemonObject"
        exports: ["QtDemon/DemonEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "string" }
        }
    }
    Component {
        name: "QDemonImage"
        defaultProperty: "data"
        prototype: "QDemonObject"
        exports: ["QtDemon/DemonImage 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MappingMode"
            values: {
                "Normal": 0,
                "Environment": 1,
                "LightProbe": 2
            }
        }
        Enum {
            name: "TilingMode"
            values: {
                "Unknown": 0,
                "ClampToEdge": 1,
                "MirroredRepeat": 2,
                "Repeat": 3
            }
        }
        Property { name: "source"; type: "string" }
        Property { name: "scaleu"; type: "float" }
        Property { name: "scalev"; type: "float" }
        Property { name: "mappingmode"; type: "MappingMode" }
        Property { name: "tilingmodehorz"; type: "TilingMode" }
        Property { name: "tilingmodevert"; type: "TilingMode" }
        Property { name: "rotationuv"; type: "float" }
        Property { name: "positionu"; type: "float" }
        Property { name: "positionv"; type: "float" }
        Property { name: "pivotu"; type: "float" }
        Property { name: "pivotv"; type: "float" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "string" }
        }
        Signal {
            name: "scaleUChanged"
            Parameter { name: "scaleu"; type: "float" }
        }
        Signal {
            name: "scaleVChanged"
            Parameter { name: "scalev"; type: "float" }
        }
        Signal {
            name: "mappingModeChanged"
            Parameter { name: "mappingmode"; type: "MappingMode" }
        }
        Signal {
            name: "horizontalTilingChanged"
            Parameter { name: "tilingmodehorz"; type: "TilingMode" }
        }
        Signal {
            name: "verticalTilingChanged"
            Parameter { name: "tilingmodevert"; type: "TilingMode" }
        }
        Signal {
            name: "rotationUVChanged"
            Parameter { name: "rotationuv"; type: "float" }
        }
        Signal {
            name: "positionUChanged"
            Parameter { name: "positionu"; type: "float" }
        }
        Signal {
            name: "positionVChanged"
            Parameter { name: "positionv"; type: "float" }
        }
        Signal {
            name: "piviotUChanged"
            Parameter { name: "pivotu"; type: "float" }
        }
        Signal {
            name: "piviotVChanged"
            Parameter { name: "pivotv"; type: "float" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "setScaleU"
            Parameter { name: "scaleu"; type: "float" }
        }
        Method {
            name: "setScaleV"
            Parameter { name: "scalev"; type: "float" }
        }
        Method {
            name: "setMappingMode"
            Parameter { name: "mappingmode"; type: "MappingMode" }
        }
        Method {
            name: "setHorizontalTiling"
            Parameter { name: "tilingmodehorz"; type: "TilingMode" }
        }
        Method {
            name: "setVerticalTiling"
            Parameter { name: "tilingmodevert"; type: "TilingMode" }
        }
        Method {
            name: "setRotationUV"
            Parameter { name: "rotationuv"; type: "float" }
        }
        Method {
            name: "setPositionU"
            Parameter { name: "positionu"; type: "float" }
        }
        Method {
            name: "setPositionV"
            Parameter { name: "positionv"; type: "float" }
        }
        Method {
            name: "setPivotU"
            Parameter { name: "pivotu"; type: "float" }
        }
        Method {
            name: "setPivotV"
            Parameter { name: "pivotv"; type: "float" }
        }
    }
    Component {
        name: "QDemonLight"
        defaultProperty: "data"
        prototype: "QDemonNode"
        exports: ["QtDemon/DemonLight 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QDemonRenderLightTypes"
            values: {
                "Unknown": 0,
                "Directional": 1,
                "Point": 2,
                "Area": 3
            }
        }
        Property { name: "lightType"; type: "QDemonRenderLightTypes" }
        Property { name: "diffuseColor"; type: "QColor" }
        Property { name: "specularColor"; type: "QColor" }
        Property { name: "ambientColor"; type: "QColor" }
        Property { name: "brightness"; type: "float" }
        Property { name: "linearFade"; type: "float" }
        Property { name: "exponentialFade"; type: "float" }
        Property { name: "areaWidth"; type: "float" }
        Property { name: "areaHeight"; type: "float" }
        Property { name: "castShadow"; type: "bool" }
        Property { name: "shadowBias"; type: "float" }
        Property { name: "shadowFactor"; type: "float" }
        Property { name: "shadowMapResolution"; type: "int" }
        Property { name: "shadowMapFar"; type: "float" }
        Property { name: "shadowMapFieldOfView"; type: "float" }
        Property { name: "shadowFilter"; type: "float" }
        Signal {
            name: "lightTypeChanged"
            Parameter { name: "lightType"; type: "QDemonRenderLightTypes" }
        }
        Signal {
            name: "diffuseColorChanged"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Signal {
            name: "specularColorChanged"
            Parameter { name: "specularColor"; type: "QColor" }
        }
        Signal {
            name: "ambientColorChanged"
            Parameter { name: "ambientColor"; type: "QColor" }
        }
        Signal {
            name: "brightnessChanged"
            Parameter { name: "brightness"; type: "float" }
        }
        Signal {
            name: "linearFadeChanged"
            Parameter { name: "linearFade"; type: "float" }
        }
        Signal {
            name: "exponentialFadeChanged"
            Parameter { name: "exponentialFade"; type: "float" }
        }
        Signal {
            name: "areaWidthChanged"
            Parameter { name: "areaWidth"; type: "float" }
        }
        Signal {
            name: "areaHeightChanged"
            Parameter { name: "areaHeight"; type: "float" }
        }
        Signal {
            name: "castShadowChanged"
            Parameter { name: "castShadow"; type: "bool" }
        }
        Signal {
            name: "shadowBiasChanged"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Signal {
            name: "shadowFactorChanged"
            Parameter { name: "shadowFactor"; type: "float" }
        }
        Signal {
            name: "shadowMapResolutionChanged"
            Parameter { name: "shadowMapResolution"; type: "int" }
        }
        Signal {
            name: "shadowMapFarChanged"
            Parameter { name: "shadowMapFar"; type: "float" }
        }
        Signal {
            name: "shadowMapFieldOfViewChanged"
            Parameter { name: "shadowMapFieldOfView"; type: "float" }
        }
        Signal {
            name: "shadowFilterChanged"
            Parameter { name: "shadowFilter"; type: "float" }
        }
        Method {
            name: "setLightType"
            Parameter { name: "lightType"; type: "QDemonRenderLightTypes" }
        }
        Method {
            name: "setDiffuseColor"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Method {
            name: "setSpecularColor"
            Parameter { name: "specularColor"; type: "QColor" }
        }
        Method {
            name: "setAmbientColor"
            Parameter { name: "ambientColor"; type: "QColor" }
        }
        Method {
            name: "setBrightness"
            Parameter { name: "brightness"; type: "float" }
        }
        Method {
            name: "setLinearFade"
            Parameter { name: "linearFade"; type: "float" }
        }
        Method {
            name: "setExponentialFade"
            Parameter { name: "exponentialFade"; type: "float" }
        }
        Method {
            name: "setAreaWidth"
            Parameter { name: "areaWidth"; type: "float" }
        }
        Method {
            name: "setAreaHeight"
            Parameter { name: "areaHeight"; type: "float" }
        }
        Method {
            name: "setCastShadow"
            Parameter { name: "castShadow"; type: "bool" }
        }
        Method {
            name: "setShadowBias"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Method {
            name: "setShadowFactor"
            Parameter { name: "shadowFactor"; type: "float" }
        }
        Method {
            name: "setShadowMapResolution"
            Parameter { name: "shadowMapResolution"; type: "int" }
        }
        Method {
            name: "setShadowMapFar"
            Parameter { name: "shadowMapFar"; type: "float" }
        }
        Method {
            name: "setShadowMapFieldOfView"
            Parameter { name: "shadowMapFieldOfView"; type: "float" }
        }
        Method {
            name: "setShadowFilter"
            Parameter { name: "shadowFilter"; type: "float" }
        }
    }
    Component {
        name: "QDemonMaterial"
        defaultProperty: "data"
        prototype: "QDemonObject"
        exports: ["QtDemon/DemonMaterial 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "lightmapIndirect"; type: "QDemonImage"; isPointer: true }
        Property { name: "lightmapRadiosity"; type: "QDemonImage"; isPointer: true }
        Property { name: "lightmapShadow"; type: "QDemonImage"; isPointer: true }
        Property { name: "iblProbe"; type: "QDemonImage"; isPointer: true }
        Property { name: "emissiveMap2"; type: "QDemonImage"; isPointer: true }
        Property { name: "displacementMap"; type: "QDemonImage"; isPointer: true }
        Property { name: "displacementAmount"; type: "float" }
        Signal {
            name: "lightmapIndirectChanged"
            Parameter { name: "lightmapIndirect"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "lightmapRadiosityChanged"
            Parameter { name: "lightmapRadiosity"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "lightmapShadowChanged"
            Parameter { name: "lightmapShadow"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "iblProbeChanged"
            Parameter { name: "iblProbe"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "emissiveMap2Changed"
            Parameter { name: "emissiveMap2"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "displacementMapChanged"
            Parameter { name: "displacementMap"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "displacementAmountChanged"
            Parameter { name: "displacementAmount"; type: "float" }
        }
        Method {
            name: "setLightmapIndirect"
            Parameter { name: "lightmapIndirect"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setLightmapRadiosity"
            Parameter { name: "lightmapRadiosity"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setLightmapShadow"
            Parameter { name: "lightmapShadow"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setIblProbe"
            Parameter { name: "iblProbe"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setEmissiveMap2"
            Parameter { name: "emissiveMap2"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setDisplacementMap"
            Parameter { name: "displacementMap"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setDisplacementAmount"
            Parameter { name: "displacementAmount"; type: "float" }
        }
    }
    Component {
        name: "QDemonModel"
        defaultProperty: "data"
        prototype: "QDemonNode"
        exports: ["QtDemon/DemonModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QDemonTessModeValues"
            values: {
                "NoTess": 0,
                "TessLinear": 1,
                "TessPhong": 2,
                "TessNPatch": 3
            }
        }
        Property { name: "source"; type: "string" }
        Property { name: "skeletonRoot"; type: "int" }
        Property { name: "tesselationMode"; type: "QDemonTessModeValues" }
        Property { name: "edgeTess"; type: "float" }
        Property { name: "innerTess"; type: "float" }
        Property { name: "isWireframeMode"; type: "bool" }
        Property { name: "materials"; type: "QDemonMaterial"; isList: true; isReadonly: true }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "string" }
        }
        Signal {
            name: "skeletonRootChanged"
            Parameter { name: "skeletonRoot"; type: "int" }
        }
        Signal {
            name: "tesselationModeChanged"
            Parameter { name: "tesselationMode"; type: "QDemonTessModeValues" }
        }
        Signal {
            name: "edgeTessChanged"
            Parameter { name: "edgeTess"; type: "float" }
        }
        Signal {
            name: "innerTessChanged"
            Parameter { name: "innerTess"; type: "float" }
        }
        Signal {
            name: "isWireframeModeChanged"
            Parameter { name: "isWireframeMode"; type: "bool" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "setSkeletonRoot"
            Parameter { name: "skeletonRoot"; type: "int" }
        }
        Method {
            name: "setTesselationMode"
            Parameter { name: "tesselationMode"; type: "QDemonTessModeValues" }
        }
        Method {
            name: "setEdgeTess"
            Parameter { name: "edgeTess"; type: "float" }
        }
        Method {
            name: "setInnerTess"
            Parameter { name: "innerTess"; type: "float" }
        }
        Method {
            name: "setIsWireframeMode"
            Parameter { name: "isWireframeMode"; type: "bool" }
        }
    }
    Component {
        name: "QDemonNode"
        defaultProperty: "data"
        prototype: "QDemonObject"
        exports: ["QtDemon/DemonNode 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RotationOrder"
            values: {
                "XYZ": 0,
                "YZX": 8,
                "ZXY": 16,
                "XZY": 4,
                "YXZ": 12,
                "ZYX": 20,
                "XYZr": 21,
                "YZXr": 5,
                "ZXYr": 13,
                "XZYr": 9,
                "YXZr": 17,
                "ZYXr": 1
            }
        }
        Enum {
            name: "Orientation"
            values: {
                "LeftHanded": 0,
                "RightHanded": 1
            }
        }
        Property { name: "x"; type: "float" }
        Property { name: "y"; type: "float" }
        Property { name: "z"; type: "float" }
        Property { name: "rotation"; type: "QVector3D" }
        Property { name: "position"; type: "QVector3D" }
        Property { name: "scale"; type: "QVector3D" }
        Property { name: "pivot"; type: "QVector3D" }
        Property { name: "opacity"; type: "float" }
        Property { name: "boneid"; type: "int" }
        Property { name: "rotationorder"; type: "RotationOrder" }
        Property { name: "orientation"; type: "Orientation" }
        Property { name: "visible"; type: "bool" }
        Signal {
            name: "xChanged"
            Parameter { name: "x"; type: "float" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "y"; type: "float" }
        }
        Signal {
            name: "zChanged"
            Parameter { name: "z"; type: "float" }
        }
        Signal {
            name: "rotationChanged"
            Parameter { name: "rotation"; type: "QVector3D" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Signal {
            name: "scaleChanged"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Signal {
            name: "pivotChanged"
            Parameter { name: "pivot"; type: "QVector3D" }
        }
        Signal {
            name: "localOpacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "skeletonIdChanged"
            Parameter { name: "boneid"; type: "int" }
        }
        Signal {
            name: "rotationOrderChanged"
            Parameter { name: "rotationorder"; type: "RotationOrder" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "Orientation" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setX"
            Parameter { name: "x"; type: "float" }
        }
        Method {
            name: "setY"
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "setZ"
            Parameter { name: "z"; type: "float" }
        }
        Method {
            name: "setRotation"
            Parameter { name: "rotation"; type: "QVector3D" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Method {
            name: "setPivot"
            Parameter { name: "pivot"; type: "QVector3D" }
        }
        Method {
            name: "setLocalOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setSkeletonId"
            Parameter { name: "boneid"; type: "int" }
        }
        Method {
            name: "setRotationOrder"
            Parameter { name: "rotationorder"; type: "RotationOrder" }
        }
        Method {
            name: "setOrientation"
            Parameter { name: "orientation"; type: "Orientation" }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
    }
    Component {
        name: "QDemonObject"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["QtDemon/DemonObject 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Unknown": 0,
                "Presentation": 1,
                "Scene": 2,
                "Node": 3,
                "Layer": 4,
                "Light": 5,
                "Camera": 6,
                "Model": 7,
                "DefaultMaterial": 8,
                "Image": 9,
                "Text": 10,
                "Effect": 11,
                "CustomMaterial": 12,
                "RenderPlugin": 13,
                "ReferencedMaterial": 14,
                "Path": 15,
                "PathSubPath": 16,
                "Lightmaps": 17,
                "LastKnownGraphObjectType": 18
            }
        }
        Property { name: "parent"; type: "QDemonObject"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QDemonObject"; isList: true; isReadonly: true }
        Property { name: "id"; type: "QByteArray"; isReadonly: true }
        Property { name: "name"; type: "string" }
        Property { name: "type"; type: "QDemonObject::Type"; isReadonly: true }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "visibleChildren"; type: "QDemonObject"; isList: true; isReadonly: true }
        Signal {
            name: "sceneRendererChanged"
            Parameter { name: "sceneRenderer"; type: "QDemonSceneManager"; isPointer: true }
        }
        Signal {
            name: "parentChanged"
            Parameter { name: "parent"; type: "QDemonObject"; isPointer: true }
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
        Method { name: "update" }
        Method {
            name: "setParentItem"
            Parameter { name: "parentItem"; type: "QDemonObject"; isPointer: true }
        }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
    }
    Component {
        name: "QDemonSceneEnvironment"
        prototype: "QObject"
        exports: ["QtDemon/DemonSceneEnvironment 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QDemonEnvironmentAAModeValues"
            values: {
                "NoAA": 0,
                "SSAA": 1,
                "X2": 2,
                "X4": 4,
                "X8": 8
            }
        }
        Enum {
            name: "QDemonEnvironmentBackgroundTypes"
            values: {
                "Transparent": 0,
                "Unspecified": 1,
                "Color": 2
            }
        }
        Enum {
            name: "QDemonEnvironmentBlendTypes"
            values: {
                "Normal": 0,
                "Screen": 1,
                "Multiply": 2,
                "Add": 3,
                "Subtract": 4,
                "Overlay": 5,
                "ColorBurn": 6,
                "ColorDodge": 7
            }
        }
        Property { name: "effects"; type: "QDemonEffect"; isList: true; isReadonly: true }
        Property { name: "progressiveAAMode"; type: "QDemonEnvironmentAAModeValues" }
        Property { name: "multisampleAAMode"; type: "QDemonEnvironmentAAModeValues" }
        Property { name: "temporalAAEnabled"; type: "bool" }
        Property { name: "backgroundMode"; type: "QDemonEnvironmentBackgroundTypes" }
        Property { name: "clearColor"; type: "QColor" }
        Property { name: "blendType"; type: "QDemonEnvironmentBlendTypes" }
        Property { name: "aoStrength"; type: "float" }
        Property { name: "aoDistance"; type: "float" }
        Property { name: "aoSoftness"; type: "float" }
        Property { name: "aoDither"; type: "bool" }
        Property { name: "aoSampleRate"; type: "int" }
        Property { name: "aoBias"; type: "float" }
        Property { name: "shadowStrength"; type: "float" }
        Property { name: "shadowDistance"; type: "float" }
        Property { name: "shadowSoftness"; type: "float" }
        Property { name: "shadowBias"; type: "float" }
        Property { name: "lightProbe"; type: "QDemonImage"; isPointer: true }
        Property { name: "probeBrightness"; type: "float" }
        Property { name: "fastIBL"; type: "bool" }
        Property { name: "probeHorizon"; type: "float" }
        Property { name: "probeFieldOfView"; type: "float" }
        Property { name: "lightProbe2"; type: "QDemonImage"; isPointer: true }
        Property { name: "probe2Fade"; type: "float" }
        Property { name: "probe2Window"; type: "float" }
        Property { name: "probe2Postion"; type: "float" }
        Signal {
            name: "progressiveAAModeChanged"
            Parameter { name: "progressiveAAMode"; type: "QDemonEnvironmentAAModeValues" }
        }
        Signal {
            name: "multisampleAAModeChanged"
            Parameter { name: "multisampleAAMode"; type: "QDemonEnvironmentAAModeValues" }
        }
        Signal {
            name: "temporalAAEnabledChanged"
            Parameter { name: "temporalAAEnabled"; type: "bool" }
        }
        Signal {
            name: "backgroundModeChanged"
            Parameter { name: "backgroundMode"; type: "QDemonEnvironmentBackgroundTypes" }
        }
        Signal {
            name: "clearColorChanged"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Signal {
            name: "blendTypeChanged"
            Parameter { name: "blendType"; type: "QDemonEnvironmentBlendTypes" }
        }
        Signal {
            name: "aoStrengthChanged"
            Parameter { name: "aoStrength"; type: "float" }
        }
        Signal {
            name: "aoDistanceChanged"
            Parameter { name: "aoDistance"; type: "float" }
        }
        Signal {
            name: "aoSoftnessChanged"
            Parameter { name: "aoSoftness"; type: "float" }
        }
        Signal {
            name: "aoDitherChanged"
            Parameter { name: "aoDither"; type: "bool" }
        }
        Signal {
            name: "aoSampleRateChanged"
            Parameter { name: "aoSampleRate"; type: "int" }
        }
        Signal {
            name: "aoBiasChanged"
            Parameter { name: "aoBias"; type: "float" }
        }
        Signal {
            name: "shadowStrengthChanged"
            Parameter { name: "shadowStrength"; type: "float" }
        }
        Signal {
            name: "shadowDistanceChanged"
            Parameter { name: "shadowDistance"; type: "float" }
        }
        Signal {
            name: "shadowSoftnessChanged"
            Parameter { name: "shadowSoftness"; type: "float" }
        }
        Signal {
            name: "shadowBiasChanged"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Signal {
            name: "lightProbeChanged"
            Parameter { name: "lightProbe"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "probeBrightnessChanged"
            Parameter { name: "probeBrightness"; type: "float" }
        }
        Signal {
            name: "fastIBLChanged"
            Parameter { name: "fastIBL"; type: "bool" }
        }
        Signal {
            name: "probeHorizonChanged"
            Parameter { name: "probeHorizon"; type: "float" }
        }
        Signal {
            name: "probeFieldOfViewChanged"
            Parameter { name: "probeFieldOfView"; type: "float" }
        }
        Signal {
            name: "lightProbe2Changed"
            Parameter { name: "lightProbe2"; type: "QDemonImage"; isPointer: true }
        }
        Signal {
            name: "probe2FadeChanged"
            Parameter { name: "probe2Fade"; type: "float" }
        }
        Signal {
            name: "probe2WindowChanged"
            Parameter { name: "probe2Window"; type: "float" }
        }
        Signal {
            name: "probe2PostionChanged"
            Parameter { name: "probe2Postion"; type: "float" }
        }
        Method {
            name: "setProgressiveAAMode"
            Parameter { name: "progressiveAAMode"; type: "QDemonEnvironmentAAModeValues" }
        }
        Method {
            name: "setMultisampleAAMode"
            Parameter { name: "multisampleAAMode"; type: "QDemonEnvironmentAAModeValues" }
        }
        Method {
            name: "setTemporalAAEnabled"
            Parameter { name: "temporalAAEnabled"; type: "bool" }
        }
        Method {
            name: "setBackgroundMode"
            Parameter { name: "backgroundMode"; type: "QDemonEnvironmentBackgroundTypes" }
        }
        Method {
            name: "setClearColor"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Method {
            name: "setBlendType"
            Parameter { name: "blendType"; type: "QDemonEnvironmentBlendTypes" }
        }
        Method {
            name: "setAoStrength"
            Parameter { name: "aoStrength"; type: "float" }
        }
        Method {
            name: "setAoDistance"
            Parameter { name: "aoDistance"; type: "float" }
        }
        Method {
            name: "setAoSoftness"
            Parameter { name: "aoSoftness"; type: "float" }
        }
        Method {
            name: "setAoDither"
            Parameter { name: "aoDither"; type: "bool" }
        }
        Method {
            name: "setAoSampleRate"
            Parameter { name: "aoSampleRate"; type: "int" }
        }
        Method {
            name: "setAoBias"
            Parameter { name: "aoBias"; type: "float" }
        }
        Method {
            name: "setShadowStrength"
            Parameter { name: "shadowStrength"; type: "float" }
        }
        Method {
            name: "setShadowDistance"
            Parameter { name: "shadowDistance"; type: "float" }
        }
        Method {
            name: "setShadowSoftness"
            Parameter { name: "shadowSoftness"; type: "float" }
        }
        Method {
            name: "setShadowBias"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Method {
            name: "setLightProbe"
            Parameter { name: "lightProbe"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setProbeBrightness"
            Parameter { name: "probeBrightness"; type: "float" }
        }
        Method {
            name: "setFastIBL"
            Parameter { name: "fastIBL"; type: "bool" }
        }
        Method {
            name: "setProbeHorizon"
            Parameter { name: "probeHorizon"; type: "float" }
        }
        Method {
            name: "setProbeFieldOfView"
            Parameter { name: "probeFieldOfView"; type: "float" }
        }
        Method {
            name: "setLightProbe2"
            Parameter { name: "lightProbe2"; type: "QDemonImage"; isPointer: true }
        }
        Method {
            name: "setProbe2Fade"
            Parameter { name: "probe2Fade"; type: "float" }
        }
        Method {
            name: "setProbe2Window"
            Parameter { name: "probe2Window"; type: "float" }
        }
        Method {
            name: "setProbe2Postion"
            Parameter { name: "probe2Postion"; type: "float" }
        }
    }
    Component {
        name: "QDemonView3D"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtDemon/DemonView3D 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "camera"; type: "QDemonCamera"; isPointer: true }
        Property { name: "environment"; type: "QDemonSceneEnvironment"; isPointer: true }
        Property { name: "scene"; type: "QDemonNode"; isPointer: true }
        Signal {
            name: "cameraChanged"
            Parameter { name: "camera"; type: "QDemonCamera"; isPointer: true }
        }
        Signal {
            name: "environmentChanged"
            Parameter { name: "environment"; type: "QDemonSceneEnvironment"; isPointer: true }
        }
        Signal {
            name: "sceneChanged"
            Parameter { name: "sceneRoot"; type: "QDemonNode"; isPointer: true }
        }
        Method {
            name: "setCamera"
            Parameter { name: "camera"; type: "QDemonCamera"; isPointer: true }
        }
        Method {
            name: "setEnvironment"
            Parameter { name: "environment"; type: "QDemonSceneEnvironment"; isPointer: true }
        }
        Method {
            name: "setScene"
            Parameter { name: "sceneRoot"; type: "QDemonNode"; isPointer: true }
        }
    }
}
